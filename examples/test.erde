#! this is a shebang

--[[
this is a block comment
]]

-- -----------------------------------------------------------------------------
-- Wrappers
-- -----------------------------------------------------------------------------

(1, 2)
[]
{{}}
(())

-- Anti-Examples

())
[]]
{}}

-- -----------------------------------------------------------------------------
-- Operators
-- -----------------------------------------------------------------------------

-- Single char operators

#a
~a
a | b
a & b
a + b
a - b
a < b
a > b
a = b
a + b
a - b
a * b
a / b
a % b
a ^ b

-- Multi char operators

a .. b
a == b
a ~= b
a <= b
a >= b
a .| b
a .& b
a .~ b
a .<< b
a .>> b
a // b

(1, 2, 3) >> test

a ? b : c
a ?? b
a?.b?[1].c?(a, b)

a.b[c]()

-- -----------------------------------------------------------------------------
-- Types
-- -----------------------------------------------------------------------------

-- Examples

nil
true
false

43
0x3fa
0x9.aaeep+3
.543
30.43
30e3
30e+3
30e-3

'single {word} string'
'single {99} string'
"Breakdouble {99} string"

[[ long {99} ]]
[=[ long {0x43} ]=]

'single \{99\} string'
'single \n string'

-- -----------------------------------------------------------------------------
-- Scopes / Vars
-- -----------------------------------------------------------------------------

local a, b
local a = 4
global b = 4
module c = 4

local a, { a, b, [ hello, world ] } = 1, 4
local {
  a,
  b
}, b = 4

-- -----------------------------------------------------------------------------
-- Logic Flow
-- -----------------------------------------------------------------------------

do { }

if {} + {} {}
if a.b[c]() {}
if test({1, 2}) { }
elseif 1 { }
else { }

repeat { } until 3
while x {}

for i = 1, 2 { }
for k, v in ipairs() { }

return

while true {
  break
  continue
}

try {}
catch() {}

-- -----------------------------------------------------------------------------
-- Tables
-- -----------------------------------------------------------------------------

local x = {
  mykey = { x = 2 },
  ['mykey'] = (a, b) => { return a + b },
  mykey = a -> ({ 1, 2 }),
  mykey = 3,
}

-- Anti-Examples (not fixable in vim)

x.local
x.return
x.catch()

-- -----------------------------------------------------------------------------
-- Functions
-- -----------------------------------------------------------------------------

function test(a, b = 3, ...c) {}
local function test.test:test() {}
local function test.test:test({ a, [b] }) {}

local x = () -> "hello"
local x = () -> { return }
local x = (a, b) => (1, 2, "hi")
myfunc(() -> print('hello world'))

test.test()
test(1, 2, 3, a, b, c)
test.test(1, 2, 3, a, b, c)
test.test:test(1, 2, 3, a, b, c)
test?.test[1]:test(1, 2, 3, a, b, c)

return (
  1,
  2,
  3,
)

-- -----------------------------------------------------------------------------
-- Std Library
-- -----------------------------------------------------------------------------

_VERSION

coroutine.create()
coroutine.createee()

-- Anti-Examples

acoroutine.create()
a.coroutine.create()
