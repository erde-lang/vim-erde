#! this is a shebang

--[[
this is a block comment
]]

-- -----------------------------------------------------------------------------
-- Operators
-- -----------------------------------------------------------------------------

-- Single char operators

#a
~a
a | b
a & b
a + b
a - b
a < b
a > b
a = b
a + b
a - b
a * b
a / b
a % b
a ^ b

-- Multi char operators

a .. b
...a
a ?? b
a == b
a ~= b
a <= b
a >= b
a .| b
a .& b
a .~ b
a .<< b
a .>> b
a // b

(1, 2, 3) >> test

-- Anti examples (should NOT be highlighted correctly)

a === b
a || b
a ? b

-- -----------------------------------------------------------------------------
-- Terminals
-- -----------------------------------------------------------------------------

nil
true
false

-- -----------------------------------------------------------------------------
-- Numbers
-- -----------------------------------------------------------------------------

-- Examples

43
0x3fa
0x9.aaeep+3
.543
30.43
30e3
30e+3
30e-3

-- Anti-Examples

x93
43e
43e-

-- -----------------------------------------------------------------------------
-- Strings
-- -----------------------------------------------------------------------------

'single {quote} string'
"Breakdouble {quote} string"

[[ long {string} ]]
[=[ long {string} ]=]

'single \{quote} string'

-- -----------------------------------------------------------------------------
-- Scopes
-- -----------------------------------------------------------------------------

local a = 4
global b = 4
module c = 4

-- -----------------------------------------------------------------------------
-- Logic Flow
-- -----------------------------------------------------------------------------

do { }

if test({1, 2}) { }
elseif 1 { }
else { }

repeat { } until 3
while x {}

for i = 1, 2 { }
for k, v in ipairs() { }

break
continue
return

do {
  break
  continue
  return
}

try {

} catch() {

}

-- -----------------------------------------------------------------------------
-- Tables
-- -----------------------------------------------------------------------------

local x = {
  :mykey,
  mykey = 3,
  mykey = () -> {},
  ['somekey'] = () -> {},
}

-- -----------------------------------------------------------------------------
-- Optional Chaining
-- -----------------------------------------------------------------------------

local x = a?.b?[1].c?()

-- -----------------------------------------------------------------------------
-- Functions
-- -----------------------------------------------------------------------------

local function test(a, b = 3, ...c) {}
local function test.test:test() {}
-- anti example
local function test:test.test() {}

local x = () -> "hello"
local x = () -> {}
local x = (a, b) => {}

test(1, 2, 3)
test.test(1, 2, 3)
test.test:test(1, 2, 3)

return (
  1,
  2,
  3,
)
