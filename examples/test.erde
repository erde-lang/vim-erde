#! this is a shebang

--[[
this is a block comment
]]

-- -----------------------------------------------------------------------------
-- Wrappers
-- -----------------------------------------------------------------------------

(1, 2)
[]

-- Anti-Examples

())
[]]
{}}

-- -----------------------------------------------------------------------------
-- Operators
-- -----------------------------------------------------------------------------

-- Single char operators

#a
~a
a | b
a & b
a + b
a - b
a < b
a > b
a = b
a + b
a - b
a * b
a / b
a % b
a ^ b

-- Multi char operators

a .. b
...a
a ?? b
a == b
a ~= b
a <= b
a >= b
a .| b
a .& b
a .~ b
a .<< b
a .>> b
a // b

(1, 2, 3) >> test

-- Anti-Examples

a === b
a || b
a ? b

-- -----------------------------------------------------------------------------
-- Types
-- -----------------------------------------------------------------------------

-- Examples

nil
true
false

43
0x3fa
0x9.aaeep+3
.543
30.43
30e3
30e+3
30e-3

'single {99} string'
"Breakdouble {99} string"

[[ long {99} ]]
[=[ long {99} ]=]

'single \{99\} string'
'single \n string'

-- Anti-Examples

x93
43e
43e-

-- -----------------------------------------------------------------------------
-- Scopes
-- -----------------------------------------------------------------------------

local a = 4
global b = 4
module c = 4

-- -----------------------------------------------------------------------------
-- Logic Flow
-- -----------------------------------------------------------------------------

do { }

if test({1, 2}) { }
elseif 1 { }
else { }

repeat { } until 3
while x {}

for i = 1, 2 { }
for k, v in ipairs() { }

return

while true {
  break
  continue
}

try {}
catch() {}

-- Anti-Examples

break
continue

-- -----------------------------------------------------------------------------
-- Tables
-- -----------------------------------------------------------------------------

local x = {
  :mykey,
  mykey = { x = 2 },
  ['mykey'] = () => { return },
  mykey = () -> ({ 1, 2 }),
  mykey = 3,
}

-- -----------------------------------------------------------------------------
-- Optional Chaining
-- -----------------------------------------------------------------------------

local x = a?.b?[1].c?()

-- -----------------------------------------------------------------------------
-- Functions
-- -----------------------------------------------------------------------------

local function test(a, b = 3, ...c) {}
local function test.test:test() {}

local x = () -> "hello"
local x = () -> { return }
local x = (a, b) => (1, 2, "hi")

test(1, 2, 3)
test.test(1, 2, 3)
test.test:test(1, 2, 3)

return (
  1,
  2,
  3,
)

-- Anti-Examples

local function test:test.test() {}
