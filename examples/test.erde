-- -----------------------------------------------------------------------------
-- Comments
-- -----------------------------------------------------------------------------

#! this is a shebang

-- this is an inline comment

--[[
this is a block comment
]]

-- NOTE
-- TODO
-- FIXME
-- XXX
-- TBD

-- -----------------------------------------------------------------------------
-- Keywords
-- -----------------------------------------------------------------------------

break
continue
elseif
for
function
goto
if
in
return
until
while

a.break -- anti-example

do { }
else { }
repeat {}

a.do -- anti-example

local
global
module

a.local -- anti-example

self
self.hello

a.self-- anti-example

bit32
coroutine
debug
io
math
os
package
string
table
utf8

acoroutine -- anti-example
a.coroutine -- anti-example

-- -----------------------------------------------------------------------------
-- Constants / Builtins
-- -----------------------------------------------------------------------------

MY_CONSTANT
local [ MY_CONSTANT ] = MY_OTHER_CONSTANT
local { MY_CONSTANT } = MY_OTHER_CONSTANT

nil

true
false

...

-- -----------------------------------------------------------------------------
-- Operators
-- -----------------------------------------------------------------------------

!a
#a
~a
a | b
a & b
a ~ b
a + b
a - b
a < b
a > b
a = b
a + b
a - b
a * b
a / b
a % b
a ^ b
a .. b
a == b
a != b
a <= b
a >= b
a || b
a && b
a << b
a >> b
a += b
a ~= b

a ... b -- anti-example

-- -----------------------------------------------------------------------------
-- Numbers
-- -----------------------------------------------------------------------------

0123456789
.0123456789
0123456789.0123456789
0123456789e0123456789
0123456789e-0123456789
0123456789e+0123456789
0123456789E0123456789
0123456789E-0123456789
0123456789E+0123456789

0x0123456789abcdef
0x.0123456789abcdef
0x0123456789abcdef.0123456789abcdef
0xap0123456789
0xap-0123456789
0xap+0123456789
0xaP0123456789
0xaP-0123456789
0xaP+0123456789

0x. -- anti-example
0xg -- anti-example
0xap+a -- anti-example
myvar12345 -- anti-example
myvar0x5 -- anti-example

-- -----------------------------------------------------------------------------
-- Strings
-- -----------------------------------------------------------------------------

'\a' '\b' '\f' '\n' '\r' '\t' '\v' '\z' '\'' '\"' '\
'
'\x12' '\xaf'
'\1' '\23' '\456' '\789' '\000'
'\u{1}' '\u{1234567890abcdef}'

'\c' -- anti-example
'\x1' -- anti-example
'\x1g' -- anti-example
'\0000' -- anti-example
'\u{}' -- anti-example
'\u1234' -- anti-example
'\u{g}' -- anti-example

'\a'
'single quote string'
'no interpolation: { 99 }'

"\a"
"double quote string"
"no interpolation: \{ 99 }"
"no interpolation: \{ 99 \}"
"interpolation: { 99 }"

[[\a]]
[[ block quote string ]]
[=[ block quote string 2 ]=]
[[ no interpolation: \{ 99 } ]]
[[ no interpolation: \{ 99 \} ]]
[[ interpolation: { 99 } ]]
[[ interpolation:
{99}]]

[[\\{99}]]
[[\\\{99}]]
[[
\\{99}]]
[[
\\\{99}]]

-- -----------------------------------------------------------------------------
-- Tables
-- -----------------------------------------------------------------------------

x.test
({ a = 2 }).a

a.continue -- anti-example
a.else -- anti-example
x.local -- anti-example
x.return() -- anti-example
hello..world -- anti-example

local x = { a = {} }
local x = { 34, 'hello' }
local x = { a = 'hello', b = 'world', c = { 'bye' } }
local x = { ['hi'] = 1 }
local x = { (a = {}) -> { return } }

local x = {
  ['hi'] = 1,
  a = {}
  c = { 'bye' },
  34,
  'hello',
  (a = {}) -> { return },
}

local x = {
  if = 1,
  else = 1,
  local = 1,
  coroutine = 4,
}

if {} + {} {
}

-- -----------------------------------------------------------------------------
-- Functions
-- -----------------------------------------------------------------------------

test()
test.test()
test(1, 2, 3, a, b, c)
test.test(1, 2, 3, a, b, c)
test.test:test(1, 2, 3, a, b, c)
test.test[1]:test(1, 2, 3, a, b, c)
print({})

hello () -- anti-example
return ( -- anti-example
  1,
  2,
  3,
)

() -> "test"
() -> (1, 2, 3)
() -> { return }

() => "test"
() => (1, 2, 3)
() => { return }

function test() { return }
function test.test() { return }
function test:test() { return }
function test.test:test() { return }

function test(a = 3, ...b) { return }

function test() {
  local a = 1 + 2
  return 1, 'hello', 3, a
}

-- -----------------------------------------------------------------------------
-- Destructuring
-- -----------------------------------------------------------------------------

local a, { a = 2, b } = 1, 4

local [ hello, world ] = myfunc()

local { print } = myfunc()

local { print = {} } = myfunc()

local { print: test = 1 } = myfunc()

local [ MY_CONSTANT ] = myfunc()
local { MY_CONSTANT } = myfunc()

local {
  a,
  b
}, b = 4

local function test({ test }) {}
global function test({ print }) {}
local function test([ test ]) {}
global function test([ print ]) {}

local x = { test } -> { return }
local x = { print } -> { return }
local x = [ test ] -> { return }
local x = [ print ] -> { return }

for { test } in myiter() { }
for { print } in myiter() { }

for [ test ] in myiter() { }
for [ print ] in myiter() { }

for i, { test } in myiter() { }
for { test }, i in myiter() { }

-- -----------------------------------------------------------------------------
-- Blocks / Statements
-- -----------------------------------------------------------------------------

local a, b
local a = 4
global b = 4
module c = 4
local a, b, c = 1, 2, 3
local MY_CONSTANT = 4

do { }

if {} + {} {}
if a.b[c]() {}
if test({1, 2}) { }
elseif 1 { }
else { }

repeat { } until 3
while x {}

for i = 1, 2 { }
for k, v in ipairs() { hello }
for k, v in ipairs() { a.b = instance }

return

while true {
  break
  continue
}

goto test
::test::

gototest -- anti-example
goto_test -- anti-example
_goto test -- anti-example

if x {
}
